

- Done since last push:
	- have a central way to query the tile-Offset (add it to the tiledmap script as a static function?)
		- would be cool to not have to use gameobject.find everytime :(
		( see Soundmanager.getInstance()).
	- added an Interface for all enemyCallbacks (EnemyCallback.cs) so that the enemy doesn't have to use multiple
	variables for each possible callback

- TODO:
- Quality of Life:	
	- chestst that spawn once enemies are defeated.
	- may want to change the callbacks to C# style callback functions for enemies etc.?
	- Enemies can drop hearts to heal yourself.
	- don't have to specify these little door collider, they are generated automatically.
	- Still need to convert the Ingame Link Graphics to the link.png (my own)
	(Space his sprites for Sword Attacks out more because of animation offsets are huge!!!)
	- Keydoor graphic needs to change to the open one ( animation!)
	- Sword Collider doesn't feel right it's way to big. Best method would be to just create an collider
	for the sword that perfectly synchs with the movement of you sword animation.
	- maybe make the colliders in a door smaller? so that you only have 1 Tilespace in the middle of the graphic
	of space to get trough?
	- Other little Graphical Stuff with open Doorways is that link seems to be on the wall.
	- Animation Speed of Link needs to be proportional to his walking speed!
	- Try to fix link's walking animation for left/right!
	- Animation for opening chests (so that they don't just dissapier)
	- Animation for opening Key-Doors.
	- Animation for opening Enemy-Doors (make my own animation).
	- change the camera in a way, so that it can't go outside of the tilemap. (maybe create a Tiled Object that defines
	what the camera is allowed to show of the Map?)


- Script Revisions:
	- Player.cs
		- Need the ability to more explicity differentiate between Vectors in Unityspace and Vectors in TilemapSpace
		- Usage of the Playerclass is a little bit handwavey. Meaning it is pretty unclear if the player is the one doing the actions
		or if he is the one that the actions are done with. 
			- playerInteracted() makes the player the actor and in charge of changing it's own state
			- addRupee() and addSmallKey() makes the player the one that is interacted with.
			- needs to conciece to reduce later confusion :)
	- Chest.cs and other
		- May need a generic "Interactable" Class to ensure interactable like chests are forced to have the
		playerInteracted() Function.
	- Explosion.cs
		- Can I have Callbacks from the Animator once it reaches the State "End" instead of checking every update?
	- SoundObject.cs
		- Callbacks instead of checking every frame if the sound has stopped.
	- 
	 
- New Features:
	- signs that you are able to read (on the wall and standing in the room)
	- Implement the Shield
	- Pots that you either can lift with 'e' and throw with 'e'.
	- Switches underneath Pots.
	- a 'higher' plain and a lower 'plain'.
		- in some places you can jump from a higher plain to a lower but not always.
		- you can only get to higher plains via ramps or stairs or so.
	- Different Items to use and equip.
	- Implement the Bow, Boomerang.
	- big chest to get the Dungeon Item.
	- bigger chest to get the Bosskey
	- Manabar
	- Manaflasks drop
	

- Later:
	- I want to have a specified Inventory class to hold all of Links inventory Functions later
	for grouping purposes.
	- Generate the Colliders for the wall automatically as specific tile types are never passable.
	- Different stories in a dungeon.
	- Room based Camera like in a link to the past.
	- can fall into a lower story if something is there. 
	- Enemies that you can't see normaly and you have to use the "LightBlade" so that you can see them
	by brightening up the room. But using the LightBlade requires mana.
	- Being able to save and load (all the worldstate and link's state need to be saved and loaded)
	- Have a door transition or so. Enemies should be able to respawn after a while when you are not
	around?


- Very Later:
	- Load Levels not from .tmx or directly via .xml files. With that you can use Tiled as a real level
	editor for players and also have multiple levels that way. When you select one of those levels
	in the game, the game will create a new Scene set it up in a basic form. then you will change to that scene
	and the loader of that scene will take over. the camera will be rendering the loading screen and the
	time will be set to 0 so that the game doesn't start. while the scene will be set-up in the background
	with the sripts i have.
	To make this work i would need to know how a .prefab file works or how the Tiled2Unity Programm is able
	to create a prefab with this.
	I Also would need to give the standart and used Assets of the game with the editor.
